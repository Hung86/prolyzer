service: prolyzer-backend

provider:
  name: aws
  runtime: python3.6
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  # See link for more information:
  #     https://serverless.com/framework/docs/providers/aws/guide/credentials/
  stage: ${{opt:stage, self:custom.defaultStage}}
  region: ${{opt:region, self:custom.defaultRegion}}
  profile: ${{opt:aws-profile, self:custom.profiles.${{self:provider.stage}}}}
  # See link for more information:
  #     https://serverless.com/framework/docs/providers/aws/guide/functions#versioning-deployed-functions
  environment:
    NODE_ENV: ${{self:provider.stage}}
    STACK_PREFIX: ${{self:service}}-${{self:provider.stage}}
  logRetentionInDays: 7

plugins:
  - serverless-iam-roles-per-function
  - serverless-cloudformation-changesets
  - serverless-python-requirements

resources:
  Outputs:
    HelloWorldArn:
      Value: { Fn::Sub: "${HelloWorldLambdaFunction.Arn}" }
    ProlyzerArn:
      Value: { Fn::Sub: "${ProlyzerLambdaFunction.Arn}" }
  Resources:
    DBEC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Open database for access
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: '0.0.0.0/0'
        VpcId: ${{self:custom.VpcId}}
    ProlyzerMySqlRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20
        AllowMajorVersionUpgrade: true
        AutoMinorVersionUpgrade: true
        BackupRetentionPeriod: 35
        DBInstanceClass: db.t2.small
        DBInstanceIdentifier: ${{self:service}}-${{self:provider.stage}}
        DBName: ${{env:PROLYZER_DB_SCHEMA}}
        DeleteAutomatedBackups: true
        EnableCloudwatchLogsExports:
          - audit
          - error
          - general
          - slowquery
        Engine: mysql
        EngineVersion: 5.7.22
        MasterUsername: ${{env:PROLYZER_DB_USER}}
        MasterUserPassword: ${{env:PROLYZER_DB_PASS}}
        MaxAllocatedStorage: 1000
        MonitoringInterval: 60
        MonitoringRoleArn: {"Fn::GetAtt": ["RdsMonitoringRole", "Arn"]}
        MultiAZ: true
        PubliclyAccessible: true
        SourceRegion: ${{self:provider.region}}
        StorageType: gp2
        UseDefaultProcessorFeatures: true
        VPCSecurityGroups:
          - !GetAtt DBEC2SecurityGroup.GroupId
    RdsMonitoringRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - monitoring.rds.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: AmazonRDSMonitoringPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: EnableCreationAndManagementOfRDSCloudwatchLogGroups
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:PutRetentionPolicy
                  Resource:
                    - arn:aws:logs:*:*:log-group:RDS*
                - Sid: EnableCreationAndManagementOfRDSCloudwatchLogStreams
                  Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                    - logs:GetLogEvents
                  Resource:
                    - arn:aws:logs:*:*:log-group:RDS*:log-stream:*

functions:
  helloWorld:
    name: ${{self:service}}-${{self:provider.stage}}-helloWorld
    description: 'Hello World for Python'
    handler: src/helloWorld.handler
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: helloWorld
          method: get
          cors: true
  prolyzer:
    name: ${{self:service}}-${{self:provider.stage}}-prolyzer
    description: 'Prolyzer for Python'
    handler: src/prolyzer.handler
    timeout: 30
    memorySize: 128
    events:
      - http:
         path: prolyzer
         method: get
         cors: true
    environment:
      TABLE_NAME: ${{env:PROLYZER_DB_SCHEMA}}
      DB_ENDPOINT: !GetAtt [ProlyzerMySqlRDSInstance, Endpoint.Address]

custom:
  # Custom staging profiles. You may access or modify these credentials in ~/.aws/credentials
  # See link for credentials documentation:
  #     https://serverless.com/framework/docs/providers/aws/guide/credentials/
  defaultStage: production
  defaultRegion: ap-southeast-1
  profiles:
    production: highsugar
    development: highsugar

  accountId: ${AWS::AccountId}

  pythonRequirements:
    dockerizePip: non-linux

  VpcId: ${{env:DEFAULT_VPC_ID}}
